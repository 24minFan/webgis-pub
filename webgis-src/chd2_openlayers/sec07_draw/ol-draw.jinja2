{% extends "contentj.jinja2" %}
<title>Map drawing</title>

{% block headbody %}
    <link rel="stylesheet" href="https://www.osgeo.cn/static/f2elib/ol-7.4.x/ol.css" type="text/css">

    <!--Import the js file of the latest ol version.-->
    <script src="https://www.osgeo.cn/static/f2elib/ol-7.4.x/dist/ol.js"></script>
    <style>
        #olmap {
            border: 1px solid #ddd;
            width: 99%;
            height: 400px;
        }
    </style>

{% endblock %}

{% block cntbody %}

    <div id="olmap" class="olmap"></div>
    <br>
    <form class="form-inline">
        <label>Geometry type &nbsp;</label>
        <select id="type">
            <option value="Point">Point</option>
            <option value="LineString">LineString</option>
            <option value="Polygon">Polygon</option>
            <option value="Circle">Circle</option>
        </select>
    </form>
    <br>

    <script>
        // Define the raster object as a tile layer.
        var raster = new ol.layer.Tile({  //Load the tile layer
            source: new ol.source.Stamen({        //Layer source for Stamen Tile server.
                layer: 'terrain'
            })
        });


        //Define object source
        var source = new ol.source.Vector();	//Provides vector layer source. Vector layer sources are suitable for editing. See ol.source.vector
        var vector = new ol.layer.Vector({	//The vector data rendered by the client. Note that any properties set in the options are set to the ol.Object property on the layer object;
//For example, set the Title in the options: "My Title" means the title is observable and has a get/set accessor.
            source: source,			//Source. Required value.
            style: new ol.style.Style({	// Layer style. Define a new style for the layer.
                //Fill style
                fill: new ol.style.Fill({	//Fill style.
                    color: 'rgba(255, 255, 255, 0.2)'	//Fill colors (have colors, gradients or patterns.)
                }),
                //Stroke style
                stroke: new ol.style.Stroke({		//Sets the vector feature stroke style. Note that the default value given is the canvas default, which will be used if no option is defined. The get function returns anything entered in the option; They do not return default values.
                    color: '#ffcc33',			//Color value
                    width: 2				//width
                }),
                //Picture style
                image: new ol.style.Circle({		//Set a circle style for the vector
                    radius: 7,				//Radius of the circle, required value.
                    fill: new ol.style.Fill({		//Fill style
                        color: '#ffcc33'
                    })
                })
            })
        });
        //Load map
        var olmap = new ol.Map({
            //Load layer
            layers: [raster, vector],
            target: 'olmap',		//id of the map container div
            view: new ol.View({	//The map is in 2D view
                center: [-11000000, 4600000],	//Initial center of the map
                zoom: 4			//Map initial level
            })
        });

        var modify = new ol.interaction.Modify({source: source});	//An operation to modify the feature geometry. To modify features that have been added to an existing //source, interact with the source option construct modification. If you want to modify features in a collection (for example, a //collection used by a selection interaction), use the features option to construct the interaction. Interactions must be structured with the source or features options.
        olmap.addInteraction(modify);

        var draw, snap; // We can delete them later
        var typeSelect = document.getElementById('type');

        function addInteractions() {
            draw = new ol.interaction.Draw({	//Interaction for drawing feature geometry.
                source: source,			//The target source of the drawn feature.
                type: typeSelect.value		//Type of drawing. Such as points, lines, circles, etc.
            });
            olmap.addInteraction(draw);
            snap = new ol.interaction.Snap({source: source});		//Process vector features while modifying or drawing vector features.
            olmap.addInteraction(snap);

        }

        /**
         * Handle change event.
         */
        typeSelect.onchange = function () {
            olmap.removeInteraction(draw);
            olmap.removeInteraction(snap);
            addInteractions();
        };

        addInteractions();
    </script>

{% endblock %}
<!--Examples using ol.interaction.Draw. Draw and modify maps-->