{% extends "contentj.jinja2" %}
<title>Map modification feature</title>

{% block headbody %}
    <link rel="stylesheet" href="https://www.osgeo.cn/static/f2elib/ol-7.4.x/ol.css" type="text/css">

    <!--Import the js file of the latest ol version.-->
    <script src="https://www.osgeo.cn/static/f2elib/ol-7.4.x/dist/ol.js"></script>
    <style>
        #olmap {
            border: 1px solid #ddd;
            width: 99%;
            height: 400px;
        }
    </style>

{% endblock %}

{% block cntbody %}


    <div id="olmap" class="olmap"></div>
    <br>

    <script>


        {#
      var raster = new ol.layer.Tile({	//Load the tile layer
        source: new ol.source.OSM()	//Load the OpenStreetMap layer source
      });
       #}

        //Define layer
        var raster = new ol.layer.Tile({  //Load the tile layer
            source: new ol.source.Stamen({        //Layer source for Stamen Tile server.
                layer: 'terrain'
            })
        });

        var vector = new ol.layer.Vector({	//Vector data rendered by the client.
            source: new ol.source.Vector({		//Vector data source

                url: 'https://openlayers.org/en/v4.6.5/examples/data/geojson/countries.geojson',
                format: new ol.format.GeoJSON(),	//The feature format used by the XHR feature loader when the URL is set.
                wrapX: false				//Horizontal wrap world, for vector editing across 180° and 180° longitude works fine, this should be set to false.
            })
        });
        //Define interaction vector characteristics
        var select = new ol.interaction.Select({
            wrapX: false			//Wrap the world horizontally on the selected overlay.
        });
        //Defines interactions that modify the feature geometry
        var modify = new ol.interaction.Modify({
            features: select.getFeatures()	//Characteristics of interaction. If a feature set is not provided, a vector source with source options must be provided.
        });
        //Load map
        var olmap = new ol.Map({
            interactions: ol.interaction.defaults.defaults().extend([select, modify]),	//Interactive function
            layers: [raster, vector],	//Load layer
            target: 'olmap',			//id of the map container div
            view: new ol.View({		//The map is in 2D view
                center: [0, 0],		//The initial center of the map
                zoom: 2			//The initial level of the map
            })
        });
    </script>

{% endblock %}
<!---This example demonstrates how modification and selection interactions can be used together. Zoom to the area of interest and select the feature for editing. Then drag the point to modify the feature.-->