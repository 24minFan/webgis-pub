{% extends "contentj.jinja2" %}
<title>Export</title>

{% block headbody %}

    <link rel="stylesheet" href="https://www.osgeo.cn/static/f2elib/ol-7.4.x/ol.css" type="text/css">
    <!--Import the js file of the latest ol version.-->
    <script src="https://www.osgeo.cn/static/f2elib/ol-7.4.x/dist/ol.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.3/FileSaver.min.js"></script>
    <style>
        #olmap {
            border: 1px solid #ddd;
            width: 99%;
            height: 400px;
        }
    </style>

{% endblock %}

{% block cntbody %}

        <div id="olmap" class="olmap"></div>
    <br>
    <a id="export-png" class="btn btn-primary">Download PNG</a>


     <br>

    <script>
      // This example uses FileSaver.js, and we do not have externs files.
      var olmap = new ol.Map({
        layers: [
          new ol.layer.Tile({  // Load the tile layer data
            source: new ol.source.OSM()  // The layer corresponds to the data source where the OpenStreetMap online tile service data is loaded
          }),
          new ol.layer.Vector({     //Vector presents client data. Note that any properties set in the options are set to the ol.Object property on the layer object; For example, Set the title: "My title" in the option means that the title is observable and has a Get/set visitor.
            source: new ol.source.Vector({      //Provides a source of elements for vector layers. The vector elements provided by this source are suitable for editing. About vector data optimized for rendering
              url: 'https://openlayers.org/en/v4.6.5/examples/data/geojson/countries.geojson',  //The URL of the loader
              format: new ol.format.GeoJSON()   //The function format used by the XHR function loader when setting the url. Required if the url is set, otherwise it is ignored. A feature format for reading and writing data in GeoJSON format.
            })
          })
        ],
        target: 'olmap',  // The id value of the div layer of the map container
        controls: ol.control.defaults.defaults({  //The set of controls that are included in the map by default.
          attributionOptions: {     //Property option.
            collapsible: false
          }
        }),
          //Displays a simple 2D view of the map.
        view: new ol.View({
          center: [0, 0],//Initial center of the map
          zoom: 2  //The initial map display level is 2
        })
      });
        //Button control event
      document.getElementById('export-png').addEventListener('click', function() {
        olmap.once('postcompose', function(event) {
          var canvas = event.context.canvas;
          if (navigator.msSaveBlob) {
            navigator.msSaveBlob(canvas.msToBlob(), 'olmap.png');
          } else {
            canvas.toBlob(function(blob) {
              saveAs(blob, 'olmap.png');
            });
          }
        });
        olmap.renderSync();
      });
    </script>

{% endblock %}


