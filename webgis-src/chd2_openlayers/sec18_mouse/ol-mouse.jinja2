{% extends "contentj.jinja2" %}
<title>Mouse position</title>

{% block headbody %}

    <link rel="stylesheet" href="https://www.osgeo.cn/static/f2elib/ol-7.4.x/ol.css" type="text/css">
    <!--Import the js file of the latest ol version.-->
    <script src="https://www.osgeo.cn/static/f2elib/ol-7.4.x/dist/ol.js"></script>
    <style>
        #olmap {
            border: 1px solid #ddd;
            width: 99%;
            height: 400px;
        }
    </style>

{% endblock %}

{% block cntbody %}
    <div id="olmap" class="olmap"></div>
    <div id="mouse-position"></div>
    <form>
        <label>Projection</label>
        <select id="projection">
            <option value="EPSG:4326">EPSG:4326</option>
            <option value="EPSG:3857">EPSG:3857</option>
        </select>
        <label>Accuracy</label>
        <input id="precision" type="number" min="0" max="12" value="4"/>
    </form>
    <br>

    <script>
        var mousePositionControl = new ol.control.MousePosition({ //A control that displays the 2D coordinates of the mouse cursor. By default, they are in the view projection,
            // But it can be located in any supported projection. By default, the control appears in the top right corner of the map, but you can change this control using the css selectors.
            coordinateFormat: ol.coordinate.createStringXY(4),  //Coordinate format. Returns the ol.CoordinateFormatType function, which can be used to format {ol.Coordinate} as a string.
            projection: 'EPSG:4326',        //projection
            //Comment the following two lines to place the mouse position on the map.
            className: 'custom-mouse-position',     //Name of the CSS class. The default is ol-mouse-position.
            target: document.getElementById('mouse-position'),  //If you want to render controls outside the viewport of the map, specify a target. The goal set here is ('mouse-position')
            undefinedHTML: '&nbsp;'     //A marker with undefined coordinates. The default is (empty string).
        });
        //Initially change the Map object to display the map.
        var olmap = new ol.Map({
            controls: ol.control.defaults.defaults({   // Set the map control. The collapsible control is not displayed.
                attributionOptions: {
                    collapsible: false
                }
            }).extend([mousePositionControl]), //Add the map control to mousePositionControl
            layers: [
                new ol.layer.Tile({  //Load the tile layer
                    source: new ol.source.Stamen({        //Layer source for Stamen Tile server.
                        layer: 'terrain'
                    })
                })
            ],
            target: 'olmap',  	// The id value of the div layer of the map container
            view: new ol.View({   //Displays a simple 2D view of the map.
                center: [0, 0],  //Initial center of the map
                zoom: 2   //The initial map display level is 2
            })
        });
        //Gets the value of projection
        var projectionSelect = document.getElementById('projection');
        projectionSelect.addEventListener('change', function (event) {
            mousePositionControl.setProjection(event.target.value);
        });
        //Displays the value of precision
        var precisionInput = document.getElementById('precision');
        precisionInput.addEventListener('change', function (event) {
            var format = ol.coordinate.createStringXY(event.target.valueAsNumber);
            mousePositionControl.setCoordinateFormat(format);
        });
    </script>

{% endblock %}


